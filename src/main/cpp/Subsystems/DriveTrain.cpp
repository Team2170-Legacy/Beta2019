// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "Subsystems/DriveTrain.h"
#include "Commands/TankDriveCommand.h"
#include <iostream>
#include <fstream>
#include <vector>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
int count = 0;

DriveTrain::DriveTrain() : frc::Subsystem("DriveTrain")
{
    sparkMax1.reset(new rev::CANSparkMax(1, rev::CANSparkMax::MotorType::kBrushless));
    sparkMax2.reset(new rev::CANSparkMax(2, rev::CANSparkMax::MotorType::kBrushless));
    sparkMax3.reset(new rev::CANSparkMax(3, rev::CANSparkMax::MotorType::kBrushless));
    sparkMax4.reset(new rev::CANSparkMax(4, rev::CANSparkMax::MotorType::kBrushless));
    differentialDrive.reset(new frc::DifferentialDrive(*sparkMax1, *sparkMax3));
    differentialDrive->SetSafetyEnabled(false);

    // Set follower modes for sparkMax2 and sparkMax4
    sparkMax2->Follow(*sparkMax1);
    sparkMax4->Follow(*sparkMax3);

    // Initialize PID controllers
    pidControllerL.reset(new rev::CANPIDController(sparkMax1->GetPIDController()));
    pidControllerR.reset(new rev::CANPIDController(sparkMax3->GetPIDController()));

    // Set min/max powers
    pidControllerL->SetOutputRange(kMinOutput, kMaxOutput);
    pidControllerR->SetOutputRange(kMinOutput, kMaxOutput);

    // Set kFF and kP (after tuning, since gains have already been determined)
    pidControllerL->SetP(kP);
    pidControllerR->SetP(kP);

    pidControllerL->SetFF(kFF);
    pidControllerR->SetFF(kFF);

    // auto inst = nt::NetworkTableInstance::GetDefault();
    // auto table = inst.GetTable("datatable"); //network table initialized.
}

// int MotionProfilePosition(double timeResponse, int arrCol){
//     ifstream inFile;
//     inFile.open("something");
//     if(!inFile){
//         cerr << "File not found";
//         return 1;
//     }
//     std::vector<vector<double>> positionValues; //vector to store the position value
//                                                 // across and up to get to the specified area. 
    
//     while(inFile >> x){
//         positionValues.push_back(x);    //puts table values into vector. 
//     }
//     inFile.close();

//     double distanceHorizontal = positionValues[arrCol][0];
//     double distanceVertical = positionValues[arrCol][1]; 
//     //get the distance that needs to be travelled horizontally and vertically.

//     //put it into arcade drive to move robot. 
// }

void DriveTrain::InitDefaultCommand()
{
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    SetDefaultCommand(new TankDriveCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void DriveTrain::Periodic()
{
    // Put code here to be run every loop
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

// Put methods for controlling this subsystem
// here. Call these from Commands.

void DriveTrain::TankDrive(double left, double right)
{
    //std::cout << left << "\t\t" << right << std::endl;
    differentialDrive->TankDrive(left, right);
}

void DriveTrain::TankDriveVelocity(double left, double right, bool squaredInputs)
{
    static bool reported = false;
    if (!reported)
    {
        HAL_Report(HALUsageReporting::kResourceType_RobotDrive, 4,
                   HALUsageReporting::kRobotDrive_Tank);
        reported = true;
    }

    if (left > 1.0)
    {
        left = 1.0;
    }
    if (left < -1.0)
    {
        left = -1.0;
    }
    if (right > 1.0)
    {
        right = 1.0;
    }
    if (right < -1.0)
    {
        right = -1.0;
    }

    // square the inputs (while preserving the sign) to increase fine control
    // while permitting full power
    if (squaredInputs)
    {
        left = std::copysign(left * left, left);
        right = std::copysign(right * right, right);
    }

    double leftMotorRPM = left * maxRPM;
    double rightMotorRPM = right * -maxRPM;

    // Send setpoints to pid controllers
    pidControllerL->SetReference(leftMotorRPM, rev::ControlType::kVelocity);
    pidControllerR->SetReference(rightMotorRPM, rev::ControlType::kVelocity);
}

void DriveTrain::ArcadeDrive(double leftMove, double leftRotate)
{
    // Get joystick(s)
    double y = leftMove;
    double x = leftRotate;

    // if(x > 0.5){
    //     double difference = x-0.5;
    //     x -= difference;
    // } else if(x < -0.5){
    //      double difference = x+0.5;
    //     x += difference;
    // }

    // if(y > 0.5){
    //     double difference = y-0.5;
    //     y -= difference;
    // } else if(y < -0.5){
    //      double difference = y+0.5;
    //     y += difference;
    // }
    //set the max speeds of the x and y axes to 0.5.

    //-std::cout << "Move: " << y << "\t\t" << "Rotate: " << x << std::endl;

    differentialDrive->ArcadeDrive(y, x);
}

void DriveTrain::ArcadeDriveVelocity(double leftMove, double leftRotate, bool squaredInputs)
{
    double moveValue = leftMove;
    double rotateValue = leftRotate;

    static bool reported = false;
    if (!reported)
    {
        HAL_Report(HALUsageReporting::kResourceType_RobotDrive, 4,
                   HALUsageReporting::kRobotDrive_ArcadeStandard);
        reported = true;
    }

    // local variables to hold the computed PWM values for the motors
    double leftMotorOutput;
    double rightMotorOutput;

    // LeftMove and leftRotate limits to +-1.0
    if (moveValue > 1.0)
    {
        moveValue = 1.0;
    }
    if (moveValue < -1.0)
    {
        moveValue = -1.0;
    }
    if (rotateValue > 1.0)
    {
        rotateValue = 1.0;
    }
    if (rotateValue < -1.0)
    {
        rotateValue = -1.0;
    }

    // square the inputs (while preserving the sign) to increase fine control
    // while permitting full power
    if (squaredInputs)
    {
        moveValue = std::copysign(moveValue * moveValue, moveValue);
        rotateValue = std::copysign(rotateValue * rotateValue, rotateValue);
    }

    if (moveValue > 0.0)
    {
        if (rotateValue > 0.0)
        {
            leftMotorOutput = moveValue - rotateValue;
            rightMotorOutput = std::max(moveValue, rotateValue);
        }
        else
        {
            leftMotorOutput = std::max(moveValue, -rotateValue);
            rightMotorOutput = moveValue + rotateValue;
        }
    }
    else
    {
        if (rotateValue > 0.0)
        {
            leftMotorOutput = -std::max(-moveValue, rotateValue);
            rightMotorOutput = moveValue + rotateValue;
        }
        else
        {
            leftMotorOutput = moveValue - rotateValue;
            rightMotorOutput = -std::max(-moveValue, -rotateValue);
        }
    }

    double leftMotorRPM = leftMotorOutput * maxRPM;
    double rightMotorRPM = rightMotorOutput * maxRPM;

    // Send setpoints to pid controllers
    pidControllerL->SetReference(leftMotorRPM, rev::ControlType::kVelocity);
    pidControllerR->SetReference(rightMotorRPM, rev::ControlType::kVelocity);
}

// void DriveTrain::VisionTargetDrive(double error)
// {
//     xEntry = table->GetEntry("X");
//     yEntry = table->GetEntry("Y");
// }

void DriveTrain::ClosedLoopVelocityControl(double speed)
{
    // read PID coefficients from SmartDashboard

    // // if PID coefficients on SmartDashboard have changed, write new values to controller
    // if(p != kP) {
    //     pidControllerL->SetP(p); kP = p;
    //     pidControllerR->SetP(p); kP = p;
    // }
    // if(i != kI) {
    //     pidControllerL->SetI(i); kI = i;
    //     pidControllerR->SetI(i); kI = i;
    // }
    // if(d != kD) {
    //     pidControllerL->SetD(d); kD = d;
    //     pidControllerR->SetD(d); kD = d;
    // }
    // if(iz != kIz) {
    //     pidControllerL->SetIZone(iz); kIz = iz;
    //     pidControllerR->SetIZone(iz); kIz = iz;
    // }
    // if(ff != kFF) {
    //     pidControllerL->SetFF(ff); kFF = ff;
    //     pidControllerR->SetFF(ff); kFF = ff;
    // }

    if (speed > 0.5)
    {
        double difference = speed - 0.5;
        speed -= difference;
    }
    else if (speed < -0.5)
    {
        double difference = speed + 0.5;
        speed += difference;
    }
    //set the max speeds of the axis to 0.5.

    // read setpoint from joystick and scale by max rpm
    double setPointL = maxRPM * speed;
    double setPointR = maxRPM * -speed;

    // Send setpoints to pid controllers
    pidControllerL->SetReference(setPointL, rev::ControlType::kVelocity);
    pidControllerR->SetReference(setPointR, rev::ControlType::kVelocity);

    // Put editable PID values on Dashboard

    //std::cout << kFF << std::endl;
}

double DriveTrain::getMotorRPM(int id)
{
    double rpm;

    switch (id)
    {
    case 1:
        rpm = sparkMax1->GetEncoder().GetVelocity();
        break;
    case 2:
        rpm = sparkMax2->GetEncoder().GetVelocity();
        break;
    case 3:
        rpm = sparkMax3->GetEncoder().GetVelocity();
        break;
    case 4:
        rpm = sparkMax4->GetEncoder().GetVelocity();
        break;
    }

    return rpm;
}

double DriveTrain::getRobotSpeed()
{
    double rpm = getMotorRPM(1);
    double rpm_axle = rpm / GEARING_RATIO;

    double circumference = PI * WHEEL_SIZE;

    double speed = (rpm_axle * circumference) / 12.0 / 60.0; // [ft/s]

    return speed;
}

double DriveTrain::getCommandedSpeed()
{
    return commandedSpeed;
}